# Import required libraries
from flask import Flask, request, jsonify
import nltk
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from transformers import pipeline
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text
from sqlalchemy.orm import declarative_base, sessionmaker
from datetime import datetime
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)

# Download NLTK resources with error handling
try:
    nltk.download('punkt', quiet=True)
    nltk.download('wordnet', quiet=True)
    nltk.download('stopwords', quiet=True)
except Exception as e:
    logger.error(f"NLTK download error: {e}")

# Initialize NLP components
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

# Database setup (handle paths with spaces)
db_path = os.path.abspath('chatbot_interactions.db')
engine = create_engine(f'sqlite:///{db_path}')
Base = declarative_base()

class Interaction(Base):
    __tablename__ = 'interactions'
    id = Column(Integer, primary_key=True)
    user_input = Column(Text)
    bot_response = Column(Text)
    timestamp = Column(DateTime, default=datetime.utcnow)
    session_id = Column(String(50))

# Create database tables
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# Sample FAQ data (in production, load from JSON/DB)
faqs = [
    {"question": "What are your opening hours?", "answer": "We're open from 9 AM to 5 PM, Monday to Friday."},
    {"question": "How can I contact support?", "answer": "You can reach support at support@example.com or call 123-456-7890."},
    {"question": "Where are you located?", "answer": "Our headquarters is at 123 Main Street, Anytown, USA."},
    {"question": "What payment methods do you accept?", "answer": "We accept all major credit cards and PayPal."}
]

# Initialize transformer pipeline with fallback
try:
    qa_pipeline = pipeline(
        "question-answering",
        model="distilbert-base-cased-distilled-squad",
        framework="pt"
    )
    logger.info("Transformer model loaded successfully")
except Exception as e:
    qa_pipeline = None
    logger.warning(f"Transformer model failed to load: {e}. Using FAQ-only mode.")

class ChatBot:
    def __init__(self):
        self.context = {}
        
    def preprocess_text(self, text):
        """Tokenize, lemmatize, and clean text"""
        tokens = word_tokenize(text.lower())
        tokens = [lemmatizer.lemmatize(token) for token in tokens if token.isalnum()]
        tokens = [token for token in tokens if token not in stop_words]
        return tokens
    
    def find_best_faq_match(self, user_input):
        """Find FAQ match with dynamic threshold"""
        processed_input = self.preprocess_text(user_input)
        best_match = None
        highest_score = 0
        min_match_threshold = max(1, len(processed_input) // 3)  # Dynamic threshold

        for faq in faqs:
            question_words = self.preprocess_text(faq['question'])
            score = len(set(processed_input).intersection(question_words))
            
            if score > highest_score:
                highest_score = score
                best_match = faq
        
        return best_match if highest_score >= min_match_threshold else None

    def get_contextual_response(self, user_input):
        """Generate response using FAQs or transformer"""
        # Try FAQ match first
        faq_match = self.find_best_faq_match(user_input)
        if faq_match:
            self.context['last_context'] = f"{faq_match['question']} {faq_match['answer']}"
            return faq_match['answer']
        
        # Fallback to transformer if available
        if qa_pipeline:
            context = self.context.get('last_context', 'General customer support information')
            try:
                result = qa_pipeline(question=user_input, context=context)
                if result['score'] > 0.3:
                    return result['answer']
            except Exception as e:
                logger.error(f"Transformer error: {e}")
        
        # Ultimate fallback
        return "I'm sorry, I don't understand. Could you rephrase or provide more details?"

    def respond(self, user_input, session_id="default"):
        """Process user input and log interaction"""
        response = self.get_contextual_response(user_input)
        
        # Log to database
        session = Session()
        try:
            interaction = Interaction(
                user_input=user_input,
                bot_response=response,
                session_id=session_id
            )
            session.add(interaction)
            session.commit()
        except Exception as e:
            logger.error(f"Database error: {e}")
            session.rollback()
        finally:
            session.close()
        
        return response

# Initialize chatbot
chatbot = ChatBot()

# API endpoints
@app.route('/chat', methods=['POST'])
def chat():
    """Chat endpoint with input validation"""
    data = request.get_json()
    if not data or 'message' not in data:
        return jsonify({'error': 'Message is required'}), 400
    
    try:
        response = chatbot.respond(
            user_input=data['message'],
            session_id=data.get('session_id', 'default')
        )
        return jsonify({'response': response})
    except Exception as e:
        logger.error(f"Chat error: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/interactions', methods=['GET'])
def get_interactions():
    """Secured interaction logs (add auth in production)"""
    session = Session()
    interactions = session.query(Interaction).order_by(Interaction.timestamp.desc()).limit(100).all()
    session.close()

    return jsonify([{
        'id': i.id,
        'user_input': i.user_input,
        'bot_response': i.bot_response,
        'timestamp': i.timestamp.isoformat(),
        'session_id': i.session_id
    } for i in interactions])

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)  # Disable debug in production
